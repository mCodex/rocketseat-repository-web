{"version":3,"sources":["services/api.js","pages/Main/styles.js","pages/Main/index.js","pages/Repository/index.js","routes.js","styles/global.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","Container","styled","div","Form","form","rotate","keyframes","SubmitButton","button","attrs","props","type","disabled","loading","css","List","ul","memo","useState","newRepo","setNewRepo","repositories","setRepositories","setLoading","useEffect","repositoriesFromLS","localStorage","getItem","JSON","parse","setItem","stringify","handleSubmit","e","a","preventDefault","get","response","data","name","full_name","prevState","onSubmit","placeholder","value","onChange","target","color","size","map","repository","key","href","path","exact","component","Main","Repository","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAMeA,E,OAJHC,EAAMC,OAAO,CACrBC,QAAS,2B,OCDAC,EAAYC,IAAOC,IAAV,uEAAGD,CAAH,uNAoBTE,EAAOF,IAAOG,KAAV,kEAAGH,CAAH,6IAcXI,EAASC,YAAH,8DAUCC,EAAeN,IAAOO,OAAOC,OAAM,SAAAC,GAAK,MAAK,CACtDC,KAAM,SACNC,SAAUF,EAAMG,YAFK,0EAAGZ,CAAH,0LAkBnB,SAAAS,GAAK,OACHA,EAAMG,SACNC,YADA,2CAGqBT,MAKhBU,EAAOd,IAAOe,GAAV,kEAAGf,CAAH,mNCCFgB,kBAnEF,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACRC,EADQ,KACCC,EADD,OAEyBF,mBAAS,IAFlC,mBAERG,EAFQ,KAEMC,EAFN,OAGeJ,oBAAS,GAHxB,mBAGRL,EAHQ,KAGCU,EAHD,KAKfC,qBAAU,WACN,IAAMC,EAAqBC,aAAaC,QAAQ,gBAE5CF,GACAH,EAAgBM,KAAKC,MAAMJ,MAEhC,IAEHD,qBAAU,WACNE,aAAaI,QAAQ,eAAgBF,KAAKG,UAAUV,MACrD,CAACA,IAEJ,IAEMW,EAAY,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,6DACjBD,EAAEE,iBACFZ,GAAW,GAFM,SAGM3B,EAAIwC,IAAJ,iBAAkBjB,IAHxB,cAGXkB,EAHW,OAKXC,EAAO,CACTC,KAAMF,EAASC,KAAKE,WAGxBlB,GAAgB,SAAAmB,GAAS,4BAAQA,GAAR,CAAmBH,OAC5ClB,EAAW,IAVM,kBAWVG,GAAW,IAXD,2CAAH,sDAclB,OACI,kBAACvB,EAAD,KACI,4BACI,kBAAC,IAAD,MADJ,mBAIA,kBAACG,EAAD,CAAMuC,SAAUV,GACZ,2BACIrB,KAAK,OACLgC,YAAY,2BACZC,MAAOzB,EACP0B,SA3BU,SAAAZ,GAAC,OAAIb,EAAWa,EAAEa,OAAOF,UA6BvC,kBAACrC,EAAD,CAAcM,QAASA,GAClBA,EACG,kBAAC,IAAD,CAAWkC,MAAM,OAAOC,KAAM,KAE9B,kBAAC,IAAD,CAAQD,MAAM,OAAOC,KAAM,OAKvC,kBAACjC,EAAD,KACKM,EAAa4B,KAAI,SAAAC,GAAU,OACxB,wBAAIC,IAAKD,EAAWX,MAChB,8BAAOW,EAAWX,MAClB,uBAAGa,KAAK,IAAR,qBC5DTnC,kBAJM,WACjB,OAAO,6CCGI,aACX,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOoC,KAAK,IAAIC,OAAK,EAACC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,KAAK,cAAcE,UAAWE,O,6hBCTtCC,kBAAf,KCWeC,EAPH,kBACR,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGYC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f2e7343d.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'https://api.github.com',\n});\n\nexport default api;\n","import styled, { keyframes, css } from 'styled-components';\n\nexport const Container = styled.div`\n    max-width: 700px;\n    background: #fff;\n    border-radius: 4px;\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\n    padding: 30px;\n    margin: 80px auto;\n\n    h1 {\n        font-size: 20px;\n        display: flex;\n        align-items: center;\n        flex-direction: row;\n\n        svg {\n            margin-right: 10px;\n        }\n    }\n`;\n\nexport const Form = styled.form`\n    margin-top: 30px;\n    display: flex;\n    flex-direction: row;\n\n    input {\n        flex: 1;\n        border: 1px solid #eee;\n        padding: 10px 15px;\n        border-radius: 4px;\n        font-size: 16px;\n    }\n`;\n\nconst rotate = keyframes`\n    from {\n        transform: rotate(0deg)\n    }\n\n    to {\n        transform: rotate(360deg)\n    }\n`;\n\nexport const SubmitButton = styled.button.attrs(props => ({\n    type: 'submit',\n    disabled: props.loading,\n}))`\n    background: #7159c1;\n    border: 0;\n    padding: 0 15px;\n    margin-left: 10px;\n    border-radius: 4px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    &[disabled] {\n        cursor: not-allowed;\n        opacity: 0.6;\n    }\n\n    ${props =>\n        props.loading &&\n        css`\n            svg {\n                animation: ${rotate} 2s linear infinite;\n            }\n        `}\n`;\n\nexport const List = styled.ul`\n    list-style: none;\n    margin-top: 30px;\n\n    li {\n        padding: 15px 0%;\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: center;\n\n        & + li {\n            border-top: 1px solid #eee;\n        }\n\n        a {\n            color: #7159c9;\n            text-decoration: none;\n        }\n    }\n`;\n","import React, { memo, useState, useEffect } from 'react';\nimport { FaGithubAlt, FaPlus, FaSpinner } from 'react-icons/fa';\n\nimport api from '~/services/api';\n\nimport { Container, Form, SubmitButton, List } from './styles';\n\nconst Main = () => {\n    const [newRepo, setNewRepo] = useState('');\n    const [repositories, setRepositories] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        const repositoriesFromLS = localStorage.getItem('repositories');\n\n        if (repositoriesFromLS) {\n            setRepositories(JSON.parse(repositoriesFromLS));\n        }\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem('repositories', JSON.stringify(repositories));\n    }, [repositories]);\n\n    const handleInputChange = e => setNewRepo(e.target.value);\n\n    const handleSubmit = async e => {\n        e.preventDefault();\n        setLoading(true);\n        const response = await api.get(`/repos/${newRepo}`);\n\n        const data = {\n            name: response.data.full_name,\n        };\n\n        setRepositories(prevState => [...prevState, data]);\n        setNewRepo('');\n        return setLoading(false);\n    };\n\n    return (\n        <Container>\n            <h1>\n                <FaGithubAlt />\n                Repositórios\n            </h1>\n            <Form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Adicionar Repositório\"\n                    value={newRepo}\n                    onChange={handleInputChange}\n                />\n                <SubmitButton loading={loading}>\n                    {loading ? (\n                        <FaSpinner color=\"#fff\" size={14} />\n                    ) : (\n                        <FaPlus color=\"#fff\" size={14} />\n                    )}\n                </SubmitButton>\n            </Form>\n\n            <List>\n                {repositories.map(repository => (\n                    <li key={repository.name}>\n                        <span>{repository.name}</span>\n                        <a href=\"\">Detalhes</a>\n                    </li>\n                ))}\n            </List>\n        </Container>\n    );\n};\n\nexport default memo(Main);\n","import React, { memo } from 'react';\n\nconst Repositories = () => {\n    return <p>Hello World</p>;\n};\n\nexport default memo(Repositories);\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport Main from './pages/Main';\nimport Repository from './pages/Repository';\n\nexport default function() {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route path=\"/\" exact component={Main} />\n                <Route path=\"/repository\" component={Repository} />\n            </Switch>\n        </BrowserRouter>\n    );\n}\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n    * {\n        margin: 0;\n        padding: 0;\n        outline: 0;\n        box-sizing: border-box;\n    }\n\n    html, body, #root {\n        min-height: 100%;\n    }\n\n    body {\n        background: #7159c1;\n        -webkit-font-smoothing: antialised !important;\n    }\n\n    body,input,button {\n        color: #222;\n        font-size: 14px;\n        font-family: Arial, Helvetica, sans-serif;\n    }\n\n    button {\n        cursor: pointer;\n    }\n`;\n","import React from 'react';\n\nimport Routes from './routes';\n\nimport GlobalStyle from './styles/global';\n\nconst App = () => (\n    <>\n        <Routes />\n        <GlobalStyle />\n    </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}